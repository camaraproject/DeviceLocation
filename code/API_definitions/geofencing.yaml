openapi: 3.0.3
info:
  title: Device Geofencing
  description: |
    API to create, retrieve and delete event subscriptions to realize geofencing for a user device.

    # Introduction

    With this API, customers can create subscriptions for their devices to receive notifications when a device enters or exits a specified area.

    The area provided in the request is described by a circle determined by coordinates (latitude and longitude) and an accuracy defined by the radius.

    Upon successfully creating a subscription, the API will provide an Event Subscription ID, and it will indicate the subscription's expiration date.

    If the geofencing-state of a device changes, the event subscriber will be notified back to the provided Notification-Url given by the subscription-request.

    Device geofencing API could be useful in scenarios such as:

    - Tracking devices for Presetting of Home-Settings
    - Tracking of logistics

    # Relevant terms and definitions

    * **Device**: A device refers to any physical entity that can connect to a network and participate in network communication.

    * **Area**: It specifies the geographical surface which a device is planned to enter or exit.

    # API Functionality

    The API exposes following capabilities:

    ## Device Geofencing subscription
    These endpoints allow to manage event subscription on geofencing device location event.

    The CAMARA subscription model is detailed in the CAMARA API design guideline document and follows CloudEvents specification.

    It is mandatory in the subscription to provide the event `type` for which the client would like to subscribe.

    Following event ``type`` are managed for this API:
      - ``org.camaraproject.geofencing.v0.area-entered``  - Event triggered when the device enters the given area

      - ``org.camaraproject.geofencing.v0.area-left``     - Event triggered when the device leaves the given area

    Note: Additionally to these list, ``org.camaraproject.geofencing.v0.subscription-ends`` notification `type` is sent when the subscription ends.
    This notification does not require dedicated subscription.

    It is used when:
      - the subscription expire time (optionally set by the requester) has been reached
      - the maximum number of subscription events (optionally set by the requester) has been reached
      - the API server has to stop sending notification prematurely

    ### Notification callback

    This endpoint describes the event notification received on subscription listener side when the event occurred. As for subscription, detailed description of the event notification is provided in the CAMARA API design guideline document.

    _**WARNING**: This callback endpoint must be exposed on the consumer side as `POST /{$request.body#/webhook/notificationUrl}`.
      Developers may provide a callback URL on which notifications regarding geofencing can be received from the service provider.
      If an event occurs the application will send events to the provided webhook - 'notificationUrl'._

    # Further info and support

    (FAQs will be added in a later version of the documentation)

  termsOfService: http://swagger.io/terms/
  contact:
    email: project-email@sample.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.2.0-wip
externalDocs:
  description: Product documentation at Camara
  url: https://github.com/camaraproject/

servers:
  - url: "{apiRoot}/geofencing/v0"
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root

tags:
  - name: Geofencing subscriptions
    description: Operations to manage event subscription on geofencing events for leaving and entering an area
paths:
  /subscriptions:
    post:
      tags:
        - Geofencing subscriptions
      summary: "Create a geofencing subscription for a device"
      description: Create a subscription for a device to receive notifications when a device enters or exits a specified area
      operationId: createSubscription
      parameters:
        - $ref: '#/components/parameters/x-correlator'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSubscription"
            examples:
              CIRCLE_AREA_ENTERED:
                $ref: "#/components/examples/REQUEST_CIRCLE_AREA_ENTERED"
              POLYGON_AREA_ENTERED:
                $ref: "#/components/examples/REQUEST_POLYGON_AREA_ENTERED"
        required: true
      callbacks:
        event-notifications:
          "{$request.body#/webhook/notificationUrl}":
            post:
              summary: "Subscription notification callback"
              description: |
                Important: this endpoint is to be implemented by the API consumer.
                The Device Location server will call this endpoint whenever a device geofencing related event occurs.
              operationId: postNotification
              parameters:
                - $ref: '#/components/parameters/x-correlator'
              requestBody:
                required: true
                content:
                  application/cloudevents+json:
                    schema:
                      $ref: "#/components/schemas/CloudEvent"
                    examples:
                      CIRCLE_AREA_ENTERED:
                        $ref: "#/components/examples/CIRCLE_AREA_ENTERED"
                      CIRCLE_AREA_LEFT:
                        $ref: "#/components/examples/CIRCLE_AREA_LEFT"
                      POLYGON_AREA_ENTERED:
                        $ref: "#/components/examples/POLYGON_AREA_ENTERED"
                      SUBSCRIPTION_ENDS:
                        $ref: "#/components/examples/SUBSCRIPTION_ENDS"
              responses:
                "204":
                  description: Successful notification
                  headers:
                    x-correlator:
                      $ref: '#/components/headers/x-correlator'
                "400":
                  $ref: "#/components/responses/Generic400"
                "401":
                  $ref: "#/components/responses/Generic401"
                "403":
                  $ref: "#/components/responses/Generic403"
                "500":
                  $ref: "#/components/responses/Generic500"
                "503":
                  $ref: "#/components/responses/Generic503"
              security:
                - {}
                - notificationsBearerAuth: []
      responses:
        "201":
          description: Created (Successful creation of subscription)
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionInfo"
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "409":
          $ref: "#/components/responses/Generic409"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"
      security:
        - openId:
            - geofencing:subscriptions:write
    get:
      tags:
        - Geofencing subscriptions
      summary: "Operation to retrieve a list of subscriptions."
      operationId: getSubscriptionList
      description: Operation to list subscriptions authorized to be retrieved by the provided access token.
      parameters:
        - $ref: '#/components/parameters/x-correlator'
      responses:
        "200":
          description: The list of subscriptions is retrieved.
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                items:
                  $ref: "#/components/schemas/SubscriptionInfo"
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"
      security:
        - openId:
            - geofencing:subscriptions:read

  /subscriptions/{subscriptionsId}:
    get:
      tags:
        - Geofencing subscriptions
      summary: "Operation to retrieve a subscription based on the provided ID"
      operationId: getSubscription
      description: Retrieve a given subscription by ID
      parameters:
        - $ref: '#/components/parameters/x-correlator'
        - name: subscriptionsId
          in: path
          description: Subscription identifier that was obtained from the create event subscription operation
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Contains information about Subscriptions
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionInfo"
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"
      security:
        - openId:
            - geofencing:subscriptions:read
    delete:
      tags:
        - Geofencing subscriptions
      summary: "Operation to delete a subscription"
      operationId: deleteSubscription
      description: Delete a given subscription by ID

      parameters:
        - $ref: '#/components/parameters/x-correlator'
        - name: subscriptionsId
          in: path
          description: subscription identifier
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Event subscription deleted
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"
      security:
        - openId:
            - geofencing:subscriptions:delete

components:
  securitySchemes:
    openId:
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
  parameters:
    x-correlator:
      name: x-correlator
      in: header
      description: Correlation id for the different services
      schema:
        type: string
  headers:
    x-correlator:
      description: Correlation id for the different services
      schema:
        type: string
  schemas:
    Area:
      type: object
      properties:
        areaType:
          $ref: "#/components/schemas/AreaType"
      required:
        - areaType
      discriminator:
        propertyName: areaType
        mapping:
          CIRCLE: "#/components/schemas/Circle"
          POLYGON: "#/components/schemas/Polygon"

    AreaType:
      type: string
      description: |
        Type of this area.
        CIRCLE - The area is defined as a circle.
        POLYGON - The area is defined as polygon.
      enum:
        - CIRCLE
        - POLYGON

    Circle:
      description: Circular area
      allOf:
        - $ref: "#/components/schemas/Area"
        - type: object
          properties:
            center:
              $ref: "#/components/schemas/Point"
            radius:
              type: integer
              description: Expected accuracy for the subscription event of device location in m, from location (radius)
              minimum: 2000
              maximum: 200000
          required:
            - center
            - radius
      example:
        areaType: CIRCLE
        center:
          latitude: 50.735851
          longitude: 7.10066
        radius: 50000

    Polygon:
      description: Polygon based area defined by an ordered geo points array
      type: object
      allOf:
        - $ref: "#/components/schemas/Area"
        - type: object
          properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Point"
                minItems: 3
                maxItems: 16
      example:
        areaType: POLYGON
        coordinates:
          - latitude: 52.516770
            longitude: 13.378156
          - latitude: 52.516841
            longitude: 13.379433
          - latitude: 52.515917
            longitude: 13.37959
          - latitude: 52.515849
            longitude: 13.378308

    Point:
      type: object
      description: Coordinates (latitude, longitude) defining a location in a map
      required:
        - latitude
        - longitude
      properties:
        latitude:
          $ref: "#/components/schemas/Latitude"
        longitude:
          $ref: "#/components/schemas/Longitude"
      example:
        latitude: 50.735851
        longitude: 7.10066

    Latitude:
      description: Latitude component of a location
      type: number
      format: double
      minimum: -90
      maximum: 90
      example: 50.735851

    Longitude:
      description: Longitude component of location
      type: number
      format: double
      minimum: -180
      maximum: 180
      example: 7.10066

    Device:
      description: |
        End-user equipment able to connect to a mobile network. Examples of devices include smartphones or IoT sensors/actuators.

        The developer can choose to provide the below specified device identifiers:

        * `ipv4Address`
        * `ipv6Address`
        * `phoneNumber`
        * `networkAccessIdentifier`

        NOTE: the MNO might support only a subset of these options. The API invoker can provide multiple identifiers to be compatible across different MNOs. In this case the identifiers MUST belong to the same device.
      type: object
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        networkAccessIdentifier:
          $ref: "#/components/schemas/NetworkAccessIdentifier"
        ipv4Address:
          $ref: "#/components/schemas/DeviceIpv4Addr"
        ipv6Address:
          $ref: "#/components/schemas/DeviceIpv6Address"
      minProperties: 1

    PhoneNumber:
      description: A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, prefixed with '+'.
      type: string
      pattern: '^\+[1-9][0-9]{4,14}$'
      example: "+123456789"

    NetworkAccessIdentifier:
      description: A public identifier addressing a subscription in a mobile network. In 3GPP terminology, it corresponds to the GPSI formatted with the External Identifier ({Local Identifier}@{Domain Identifier}). Unlike the telephone number, the network access identifier is not subjected to portability ruling in force, and is individually managed by each operator.
      type: string
      example: "123456789@domain.com"

    DeviceIpv4Addr:
      type: object
      description: |
        The device should be identified by either the public (observed) IP address and port as seen by the application server, or the private (local) and any public (observed) IP addresses in use by the device (this information can be obtained by various means, for example from some DNS servers).

        If the allocated and observed IP addresses are the same (i.e. NAT is not in use) then  the same address should be specified for both publicAddress and privateAddress.

        If NAT64 is in use, the device should be identified by its publicAddress and publicPort, or separately by its allocated IPv6 address (field ipv6Address of the Device object)

        In all cases, publicAddress must be specified, along with at least one of either privateAddress or publicPort, dependent upon which is known. In general, mobile devices cannot be identified by their public IPv4 address alone.
      properties:
        publicAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        privateAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        publicPort:
          $ref: "#/components/schemas/Port"
      anyOf:
        - required: [publicAddress, privateAddress]
        - required: [publicAddress, publicPort]
      example:
        publicAddress: "84.125.93.10"
        publicPort: 59765

    SingleIpv4Addr:
      description: A single IPv4 address with no subnet mask
      type: string
      format: ipv4
      example: "84.125.93.10"

    Port:
      description: TCP or UDP port number
      type: integer
      minimum: 0
      maximum: 65535

    DeviceIpv6Address:
      description: |
        The device should be identified by the observed IPv6 address, or by any single IPv6 address from within the subnet allocated to the device (e.g. adding ::0 to the /64 prefix).
      type: string
      format: ipv6
      example: 2001:db8:85a3:8d3:1319:8a2e:370:7344

    ErrorInfo:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP status code returned along with this error response
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description

    Webhook:
      type: object
      description: Detail for event channel
      properties:
        notificationUrl:
          $ref: "#/components/schemas/NotificationUrl"
        notificationAuthToken:
          $ref: "#/components/schemas/NotificationAuthToken"
      required:
        - notificationUrl

    SubscriptionId:
      type: string
      format: uuid
      description: Identifier of the event subscription - This attribute must not be present in the POST request as it is provided by API server

    SubscriptionDetail:
      type: object
      description: Subscription detail
      properties:
        device:
          $ref: "#/components/schemas/Device"
        area:
          $ref: "#/components/schemas/Area"
        type:
          $ref: "#/components/schemas/SubscriptionEventType"
      required:
        - device
        - area
        - type

    SubscriptionEventType:
      type: string
      description: |
        area-entered - Event triggered when the device enters the given area

        area-left - Event triggered when the device leaves the given area
      enum:
        - org.camaraproject.geofencing.v0.area-entered
        - org.camaraproject.geofencing.v0.area-left

    NotificationEventType:
      type: string
      description: |
        area-entered - Event triggered when the device enters the given area

        area-left - Event triggered when the device leaves the given area

        subscription-ends - Event triggered when the subscription ends
      enum:
        - org.camaraproject.geofencing.v0.area-entered
        - org.camaraproject.geofencing.v0.area-left
        - org.camaraproject.geofencing.v0.subscription-ends

    NotificationUrl:
      type: string
      example: "https://application-server.com"
      description: https callback address where the event notification must be POST-ed

    NotificationAuthToken:
      type: string
      example: "c8974e592c2fa383d4a3960714"
      description: "OAuth2 token to be used by the callback API endpoint. It MUST be indicated within HTTP Authorization header e.g. Authorization: Bearer $notificationAuthToken"

    CreateSubscription:
      description: The request for creating a geofencing subscription
      type: object
      properties:
        webhook:
          $ref: "#/components/schemas/Webhook"
        subscriptionDetail:
          $ref: "#/components/schemas/SubscriptionDetail"
        subscriptionExpireTime:
          type: string
          format: date-time
          description: The date time when the location-tracking has to be terminated.
            It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
            Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)
        subscriptionMaxEvents:
          type: integer
          description: Identifies the maximum number of event reports to be generated (>=1) - Once this number is reached, the subscription ends.
          minimum: 1
          example: 5
      required:
        - webhook
        - subscriptionDetail

    SubscriptionInfo:
      description: Represents a geofencing event subscription.
      type: object
      allOf:
        - $ref: "#/components/schemas/CreateSubscription"
        - type: object
          properties:
            subscriptionId:
              $ref: "#/components/schemas/SubscriptionId"
            startsAt:
              type: string
              format: date-time
              description: The date time when the subscription started.
                It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
                Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)
            expiresAt:
              type: string
              format: date-time
              description: The date time when the subscription will expire or expired.
                It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
                Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)
          required:
            - subscriptionId

    EventTime:
      format: date-time
      type: string
      description: |
        Timestamp of when the occurrence happened.
        If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer,
        however all producers for the same source MUST be consistent in this respect. In other words,
        either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used.
        It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone.
        Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)

    CloudEvent:
      description: The Cloud-Event used for the callback.
      type: object
      required:
        - id
        - source
        - type
        - specversion
        - time
      properties:
        id:
          description: Identifier of this event, that must be unique in the source context.
          type: string
        source:
          $ref: "#/components/schemas/Source"
        type:
          $ref: "#/components/schemas/NotificationEventType"
        specversion:
          description: Version of the specification to which this event conforms (must be 1.0 if it conforms to cloudevents 1.0.2 version)
          type: string
          enum:
            - "1.0"
        datacontenttype:
          description: 'media-type that describes the event payload encoding, must be "application/json" for CAMARA APIs'
          type: string
          enum:
            - application/json
        time:
          $ref: "#/components/schemas/EventTime"
      discriminator:
        propertyName: "type"
        mapping:
          org.camaraproject.geofencing.v0.area-left: "#/components/schemas/EventAreaLeft"
          org.camaraproject.geofencing.v0.area-entered: "#/components/schemas/EventAreaEntered"
          org.camaraproject.geofencing.v0.subscription-ends: "#/components/schemas/EventSubscriptionEnds"

    EventAreaLeft:
      description: event structure for event when the device leaves the area
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/AreaLeft"

    EventAreaEntered:
      description: event structure for event when the device enters the area
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/AreaEntered"

    EventSubscriptionEnds:
      description: event structure for event subscription ends
      allOf:
        - $ref: "#/components/schemas/CloudEvent"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/SubscriptionEnds"

    AreaLeft:
      description: Event detail structure for area-left event
      type: object
      required:
        - device
        - area
        - subscriptionId
      properties:
        device:
          $ref: "#/components/schemas/Device"
        area:
          $ref: "#/components/schemas/Area"
        subscriptionId:
          $ref: "#/components/schemas/SubscriptionId"

    AreaEntered:
      description: Event detail structure for area-entered event
      type: object
      required:
        - device
        - area
        - subscriptionId
      properties:
        device:
          $ref: "#/components/schemas/Device"
        area:
          $ref: "#/components/schemas/Area"
        subscriptionId:
          $ref: "#/components/schemas/SubscriptionId"

    SubscriptionEnds:
      description: Event detail structure for SUBSCRIPTION_ENDS event
      type: object
      required:
        - device
        - area
        - terminationReason
        - subscriptionId
      properties:
        device:
          $ref: "#/components/schemas/Device"
        area:
          $ref: "#/components/schemas/Area"
        terminationReason:
          $ref: "#/components/schemas/TerminationReason"
        subscriptionId:
          $ref: "#/components/schemas/SubscriptionId"

    Source:
      type: string
      format: uri-reference
      minLength: 1
      description: |
        Identifies the context in which an event happened, as a non-empty `URI-reference` like:
        - URI with a DNS authority:
          * https://github.com/cloudevents
          * mailto:cncf-wg-serverless@lists.cncf.io
        - Universally-unique URN with a UUID:
          * urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a66
        - Application-specific identifier:
          * /cloudevents/spec/pull/123
          * 1-555-123-4567
      example: "https://notificationSendServer12.supertelco.com"

    TerminationReason:
      type: string
      description: |
        NETWORK_TERMINATED - API server stopped sending notification
        SUBSCRIPTION_EXPIRED - Subscription expire time (optionally set by the requester) has been reached
        MAX_EVENTS_REACHED - maximum number of events (optionally set by the requester) has been reached
      enum:
        - MAX_EVENTS_REACHED
        - NETWORK_TERMINATED
        - SUBSCRIPTION_EXPIRED

  responses:
    Generic400:
      description: Invalid argument
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 400
            code: INVALID_ARGUMENT
            message: "Invalid argument"

    Generic401:
      description: Unauthenticated
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 401
            code: UNAUTHENTICATED
            message: "Authorization failed: ..."

    Generic403:
      description: Permission denied
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 403
            code: PERMISSION_DENIED
            message: "Operation not allowed: ..."

    Generic404:
      description: Not found
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 404
            code: NOT_FOUND
            message: "The specified resource is not found"

    Generic409:
      description: Conflict
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 409
            code: Conflict
            message: "There is conflict in the request"

    Generic500:
      description: Internal server error
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 500
            code: INTERNAL
            message: "Internal server error"

    Generic503:
      description: Service unavailable
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 503
            code: UNAVAILABLE
            message: "Service unavailable"


  examples:
    REQUEST_CIRCLE_AREA_ENTERED:
      value:
        webhook:
          notificationUrl: https://application-server.com
          notificationAuthToken: c8974e592c2fa383d4a3960714
        subscriptionDetail:
          device:
            phoneNumber: "+12345678912"
          area:
            areaType: CIRCLE
            center:
              latitude: 50.735851
              longitude: 7.10066
            radius: 2000
          type: org.camaraproject.geofencing.v0.area-entered
        subscriptionExpireTime: 2024-03-22T05:40:58.469Z
    CIRCLE_AREA_ENTERED:
      value:
        id: "123655"
        source: https://notificationSendServer12.supertelco.com
        type: org.camaraproject.geofencing.v0.area-entered
        specversion: "1.0"
        datacontenttype: application/json
        time: 2023-03-22T05:40:23.682Z
        data:
          subscriptionId: 987654321
          device:
            phoneNumber: +123456789
          area:
            areaType: CIRCLE
            center:
              latitude: 50.735851
              longitude: 7.10066
            radius: 2000
    CIRCLE_AREA_LEFT:
      value:
        id: "123655"
        source: https://notificationSendServer12.supertelco.com
        type: org.camaraproject.geofencing.v0.area-left
        specversion: "1.0"
        datacontenttype: application/json
        time: 2023-03-22T05:40:23.682Z
        data:
          subscriptionId: 987654321
          device:
            phoneNumber: +123456789
          area:
            areaType: CIRCLE
            center:
              latitude: 50.735851
              longitude: 7.10066
            radius: 2000

    SUBSCRIPTION_ENDS:
      value:
        id: "123655"
        source: https://notificationSendServer12.supertelco.com
        type: org.camaraproject.geofencing.v0.subscription-ends
        specversion: "1.0"
        datacontenttype: application/json
        time: 2023-03-22T05:40:23.682Z
        data:
          subscriptionId: 987654321
          device:
            phoneNumber: +123456789
          terminationReason: SUBSCRIPTION_EXPIRED

    REQUEST_POLYGON_AREA_ENTERED:
      value:
        webhook:
          notificationUrl: https://application-server.com
          notificationAuthToken: c8974e592c2fa383d4a3960714
        subscriptionDetail:
          device:
            phoneNumber: "+12345678912"
          area:
            areaType: POLYGON
            coordinates:
              - latitude: 52.516770
                longitude: 13.378156
              - latitude: 52.516841
                longitude: 13.379433
              - latitude: 52.515917
                longitude: 13.37959
              - latitude: 52.515849
                longitude: 13.378308
          type: org.camaraproject.geofencing.v0.area-entered
        subscriptionExpireTime: 2024-03-22T05:40:58.469Z
    POLYGON_AREA_ENTERED:
      value:
        id: "123655"
        source: https://notificationSendServer12.supertelco.com
        type: org.camaraproject.geofencing.v0.area-entered
        specversion: "1.0"
        datacontenttype: application/json
        time: 2023-03-22T05:40:23.682Z
        data:
          subscriptionId: 987654321
          device:
            phoneNumber: +123456789
          area:
            areaType: POLYGON
            coordinates:
              - latitude: 52.516770
                longitude: 13.378156
              - latitude: 52.516841
                longitude: 13.379433
              - latitude: 52.515917
                longitude: 13.37959
              - latitude: 52.515849
                longitude: 13.378308
